// <auto-generated />
using System;
using AutoKultura.DataAccess.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoKultura.DataAccess.SqlServer.Migrations
{
    [DbContext(typeof(AutoKulturaDbContext))]
    [Migration("20240911060300_ChangeDecimal3")]
    partial class ChangeDecimal3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.BodyworkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bodyworks");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.BrandCarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BrandsCars");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.CompanyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOrderOnOutfit")
                        .HasColumnType("int");

                    b.Property<string>("PathToFilesOrderOnOutfit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.HistoryOfTheChangePriceMaterialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateChange")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("HistoryOfTheChangePriceMaterials");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.HistoryOfTheChangesPriceServicesTypePartOfTheCarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateChange")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PartOfTheCarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("PartOfTheCarId");

                    b.ToTable("HistoryOfTheChangePriceServicesPartCar");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.LinqMaterialForServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("LinqMaterialForServices");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.LinqSpecialistForRenderServicesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RenderServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RenderServiceId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("LinqSpecialistForRenderServices");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.MaterialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Count")
                        .HasColumnType("decimal(10,3)");

                    b.Property<Guid>("MeasureUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeasureUnitId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.MeasureUnitEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeasureUnits");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.ModelCarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BodyworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandCarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BodyworkId");

                    b.HasIndex("BrandCarId");

                    b.ToTable("ModelsCars");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfDeliveryOfTheOrder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("PymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VechicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PymentMethodId");

                    b.HasIndex("VechicleId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.PartOfTheCarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("PartsOfTheCar");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.PymentMethodEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("MethodDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PymentMethods");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.RenderServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartOfTheCarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartOfTheCarId");

                    b.ToTable("RendersServices");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.ServiceTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServicesTypes");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.SpecialistEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialists");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.UsedUpMaterialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("QuantityMaterial")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("RenderServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("RenderServiceId");

                    b.ToTable("UsedUpMaterials");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.VechicleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModelCarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegisterNumberCar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModelCarId");

                    b.ToTable("Vechicles");
                });

            modelBuilder.Entity("LinqMaterialForServiceEntityMaterialEntity", b =>
                {
                    b.Property<Guid>("LinqsServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaterialsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LinqsServicesId", "MaterialsId");

                    b.HasIndex("MaterialsId");

                    b.ToTable("LinqMaterialForServiceEntityMaterialEntity");
                });

            modelBuilder.Entity("LinqMaterialForServiceEntityServiceTypeEntity", b =>
                {
                    b.Property<Guid>("LinqMaterialsForServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicesTypesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LinqMaterialsForServicesId", "ServicesTypesId");

                    b.HasIndex("ServicesTypesId");

                    b.ToTable("LinqMaterialForServiceEntityServiceTypeEntity");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.HistoryOfTheChangePriceMaterialEntity", b =>
                {
                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.MaterialEntity", "Material")
                        .WithMany("HistoryOfTheChangesPriceMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.HistoryOfTheChangesPriceServicesTypePartOfTheCarEntity", b =>
                {
                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.PartOfTheCarEntity", "PartOfTheCar")
                        .WithMany("HistoryOfTheChangesPriceServicesTypePartOfTheCar")
                        .HasForeignKey("PartOfTheCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartOfTheCar");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.LinqSpecialistForRenderServicesEntity", b =>
                {
                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.RenderServiceEntity", "RenderService")
                        .WithMany("LinqSecialist")
                        .HasForeignKey("RenderServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.SpecialistEntity", "Specialist")
                        .WithMany("LinqsRenderServices")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RenderService");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.MaterialEntity", b =>
                {
                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.MeasureUnitEntity", "MeasureUnit")
                        .WithMany("Materials")
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasureUnit");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.ModelCarEntity", b =>
                {
                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.BodyworkEntity", "Bodywork")
                        .WithMany("ModelsCars")
                        .HasForeignKey("BodyworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.BrandCarEntity", "BrandCar")
                        .WithMany("ModelsCars")
                        .HasForeignKey("BrandCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bodywork");

                    b.Navigation("BrandCar");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.OrderEntity", b =>
                {
                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.PymentMethodEntity", "PymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.VechicleEntity", "Vechicle")
                        .WithMany("Orders")
                        .HasForeignKey("VechicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PymentMethod");

                    b.Navigation("Vechicle");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.PartOfTheCarEntity", b =>
                {
                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.ServiceTypeEntity", "ServiceType")
                        .WithMany("PartsOfTheCar")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.RenderServiceEntity", b =>
                {
                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.OrderEntity", "Order")
                        .WithMany("RendersServices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.PartOfTheCarEntity", "PartOfTheCar")
                        .WithMany("RendersServices")
                        .HasForeignKey("PartOfTheCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PartOfTheCar");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.UsedUpMaterialEntity", b =>
                {
                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.MaterialEntity", "Material")
                        .WithMany("UsedUpMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.RenderServiceEntity", "RenderService")
                        .WithMany("UsedUpMaterials")
                        .HasForeignKey("RenderServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("RenderService");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.VechicleEntity", b =>
                {
                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.CustomerEntity", "Customer")
                        .WithMany("Vechicles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.ModelCarEntity", "ModelCar")
                        .WithMany("Vechicles")
                        .HasForeignKey("ModelCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ModelCar");
                });

            modelBuilder.Entity("LinqMaterialForServiceEntityMaterialEntity", b =>
                {
                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.LinqMaterialForServiceEntity", null)
                        .WithMany()
                        .HasForeignKey("LinqsServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.MaterialEntity", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LinqMaterialForServiceEntityServiceTypeEntity", b =>
                {
                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.LinqMaterialForServiceEntity", null)
                        .WithMany()
                        .HasForeignKey("LinqMaterialsForServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoKultura.DataAccess.SqlServer.Models.ServiceTypeEntity", null)
                        .WithMany()
                        .HasForeignKey("ServicesTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.BodyworkEntity", b =>
                {
                    b.Navigation("ModelsCars");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.BrandCarEntity", b =>
                {
                    b.Navigation("ModelsCars");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.CustomerEntity", b =>
                {
                    b.Navigation("Vechicles");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.MaterialEntity", b =>
                {
                    b.Navigation("HistoryOfTheChangesPriceMaterials");

                    b.Navigation("UsedUpMaterials");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.MeasureUnitEntity", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.ModelCarEntity", b =>
                {
                    b.Navigation("Vechicles");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.OrderEntity", b =>
                {
                    b.Navigation("RendersServices");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.PartOfTheCarEntity", b =>
                {
                    b.Navigation("HistoryOfTheChangesPriceServicesTypePartOfTheCar");

                    b.Navigation("RendersServices");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.PymentMethodEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.RenderServiceEntity", b =>
                {
                    b.Navigation("LinqSecialist");

                    b.Navigation("UsedUpMaterials");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.ServiceTypeEntity", b =>
                {
                    b.Navigation("PartsOfTheCar");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.SpecialistEntity", b =>
                {
                    b.Navigation("LinqsRenderServices");
                });

            modelBuilder.Entity("AutoKultura.DataAccess.SqlServer.Models.VechicleEntity", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
